---
// Preloader overlay component
// Shows on first load, preloads critical assets, then fades out
---

<div id="preloader-overlay" class="preloader-overlay" aria-live="polite" aria-label="Loading content" style="position:fixed;inset:0;z-index:99999;display:flex;align-items:center;justify-content:center;background:#FBF9F5;">
  <div class="preloader-content">
    <div class="preloader-text">loading</div>
    <div class="preloader-animation" aria-hidden="true">
      <!-- 8 dot grid instances with staggered delays -->
      <div class="dot-grid" style="animation-delay: 0ms;">
        <div class="dot" data-pos="1"></div>
        <div class="dot" data-pos="2"></div>
        <div class="dot" data-pos="3"></div>
        <div class="dot" data-pos="4"></div>
        <div class="dot" data-pos="5"></div>
        <div class="dot" data-pos="6"></div>
      </div>
      <div class="dot-grid" style="animation-delay: 80ms;">
        <div class="dot" data-pos="1"></div>
        <div class="dot" data-pos="2"></div>
        <div class="dot" data-pos="3"></div>
        <div class="dot" data-pos="4"></div>
        <div class="dot" data-pos="5"></div>
        <div class="dot" data-pos="6"></div>
      </div>
      <div class="dot-grid" style="animation-delay: 160ms;">
        <div class="dot" data-pos="1"></div>
        <div class="dot" data-pos="2"></div>
        <div class="dot" data-pos="3"></div>
        <div class="dot" data-pos="4"></div>
        <div class="dot" data-pos="5"></div>
        <div class="dot" data-pos="6"></div>
      </div>
      <div class="dot-grid" style="animation-delay: 240ms;">
        <div class="dot" data-pos="1"></div>
        <div class="dot" data-pos="2"></div>
        <div class="dot" data-pos="3"></div>
        <div class="dot" data-pos="4"></div>
        <div class="dot" data-pos="5"></div>
        <div class="dot" data-pos="6"></div>
      </div>
      <div class="dot-grid" style="animation-delay: 320ms;">
        <div class="dot" data-pos="1"></div>
        <div class="dot" data-pos="2"></div>
        <div class="dot" data-pos="3"></div>
        <div class="dot" data-pos="4"></div>
        <div class="dot" data-pos="5"></div>
        <div class="dot" data-pos="6"></div>
      </div>
      <div class="dot-grid" style="animation-delay: 400ms;">
        <div class="dot" data-pos="1"></div>
        <div class="dot" data-pos="2"></div>
        <div class="dot" data-pos="3"></div>
        <div class="dot" data-pos="4"></div>
        <div class="dot" data-pos="5"></div>
        <div class="dot" data-pos="6"></div>
      </div>
      <div class="dot-grid" style="animation-delay: 480ms;">
        <div class="dot" data-pos="1"></div>
        <div class="dot" data-pos="2"></div>
        <div class="dot" data-pos="3"></div>
        <div class="dot" data-pos="4"></div>
        <div class="dot" data-pos="5"></div>
        <div class="dot" data-pos="6"></div>
      </div>
      <div class="dot-grid" style="animation-delay: 560ms;">
        <div class="dot" data-pos="1"></div>
        <div class="dot" data-pos="2"></div>
        <div class="dot" data-pos="3"></div>
        <div class="dot" data-pos="4"></div>
        <div class="dot" data-pos="5"></div>
        <div class="dot" data-pos="6"></div>
      </div>
    </div>
  </div>
</div>

<style>
  .preloader-overlay {
    position: fixed;
    inset: 0;
    z-index: 9999;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #FBF9F5;
    opacity: 1;
    transition: opacity 600ms ease;
    pointer-events: all;
  }

  .preloader-overlay::before {
    content: '';
    position: absolute;
    inset: 0;
    z-index: -1;
    opacity: 0.3;
    background-repeat: repeat;
    background-size: 256px 256px;
    pointer-events: none;
  }

  .preloader-overlay.is-hidden {
    opacity: 0;
    pointer-events: none;
  }

  .preloader-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 16px;
  }

  .preloader-text {
    font-family: 'PP Mondwest', serif;
    font-size: 24px;
    font-weight: 400;
    color: #500F0B;
    letter-spacing: -0.02em;
  }

  .preloader-animation {
    display: flex;
    gap: 12px;
    align-items: center;
    justify-content: center;
    flex-wrap: wrap;
  }

  .dot-grid {
    display: grid;
    grid-template-columns: repeat(2, 9px);
    grid-template-rows: repeat(3, 9px);
    gap: 4px;
    animation: dot-cycle 960ms steps(6, end) infinite;
    /* Grid order: [c1r1][c2r1]
                    [c1r2][c2r2]
                    [c1r3][c2r3] */
  }

  .dot {
    width: 9px;
    height: 9px;
    background-color: #500F0B;
    border-radius: 0;
    opacity: 0.25;
    transform: scale(0.85);
    transition: opacity 80ms ease, transform 80ms ease;
  }

  /* Sequence: c1r1 → c2r1 → c2r2 → c2r3 → c1r3 → c1r2 → loop
     Grid positions: pos1 → pos2 → pos4 → pos6 → pos5 → pos3 */
  
  @keyframes dot-cycle {
    0% { --active-pos: 1; }        /* c1r1 - top left */
    16.666% { --active-pos: 2; }   /* c2r1 - top right */
    33.333% { --active-pos: 4; }   /* c2r2 - middle right */
    50% { --active-pos: 6; }       /* c2r3 - bottom right */
    66.666% { --active-pos: 5; }   /* c1r3 - bottom left */
    83.333% { --active-pos: 3; }   /* c1r2 - middle left */
    100% { --active-pos: 1; }
  }

  /* Active state for each position */
  .dot-grid[style*="animation-delay"] .dot[data-pos="1"] { animation: dot-1-active 960ms steps(6, end) infinite; }
  .dot-grid[style*="animation-delay"] .dot[data-pos="2"] { animation: dot-2-active 960ms steps(6, end) infinite; }
  .dot-grid[style*="animation-delay"] .dot[data-pos="3"] { animation: dot-3-active 960ms steps(6, end) infinite; }
  .dot-grid[style*="animation-delay"] .dot[data-pos="4"] { animation: dot-4-active 960ms steps(6, end) infinite; }
  .dot-grid[style*="animation-delay"] .dot[data-pos="5"] { animation: dot-5-active 960ms steps(6, end) infinite; }
  .dot-grid[style*="animation-delay"] .dot[data-pos="6"] { animation: dot-6-active 960ms steps(6, end) infinite; }

  .dot-grid[style*="animation-delay: 0ms"] .dot[data-pos="1"] { animation-delay: 0ms; }
  .dot-grid[style*="animation-delay: 0ms"] .dot[data-pos="2"] { animation-delay: 0ms; }
  .dot-grid[style*="animation-delay: 0ms"] .dot[data-pos="3"] { animation-delay: 0ms; }
  .dot-grid[style*="animation-delay: 0ms"] .dot[data-pos="4"] { animation-delay: 0ms; }
  .dot-grid[style*="animation-delay: 0ms"] .dot[data-pos="5"] { animation-delay: 0ms; }
  .dot-grid[style*="animation-delay: 0ms"] .dot[data-pos="6"] { animation-delay: 0ms; }

  .dot-grid[style*="animation-delay: 80ms"] .dot[data-pos="1"] { animation-delay: 80ms; }
  .dot-grid[style*="animation-delay: 80ms"] .dot[data-pos="2"] { animation-delay: 80ms; }
  .dot-grid[style*="animation-delay: 80ms"] .dot[data-pos="3"] { animation-delay: 80ms; }
  .dot-grid[style*="animation-delay: 80ms"] .dot[data-pos="4"] { animation-delay: 80ms; }
  .dot-grid[style*="animation-delay: 80ms"] .dot[data-pos="5"] { animation-delay: 80ms; }
  .dot-grid[style*="animation-delay: 80ms"] .dot[data-pos="6"] { animation-delay: 80ms; }

  .dot-grid[style*="animation-delay: 160ms"] .dot[data-pos="1"] { animation-delay: 160ms; }
  .dot-grid[style*="animation-delay: 160ms"] .dot[data-pos="2"] { animation-delay: 160ms; }
  .dot-grid[style*="animation-delay: 160ms"] .dot[data-pos="3"] { animation-delay: 160ms; }
  .dot-grid[style*="animation-delay: 160ms"] .dot[data-pos="4"] { animation-delay: 160ms; }
  .dot-grid[style*="animation-delay: 160ms"] .dot[data-pos="5"] { animation-delay: 160ms; }
  .dot-grid[style*="animation-delay: 160ms"] .dot[data-pos="6"] { animation-delay: 160ms; }

  .dot-grid[style*="animation-delay: 240ms"] .dot[data-pos="1"] { animation-delay: 240ms; }
  .dot-grid[style*="animation-delay: 240ms"] .dot[data-pos="2"] { animation-delay: 240ms; }
  .dot-grid[style*="animation-delay: 240ms"] .dot[data-pos="3"] { animation-delay: 240ms; }
  .dot-grid[style*="animation-delay: 240ms"] .dot[data-pos="4"] { animation-delay: 240ms; }
  .dot-grid[style*="animation-delay: 240ms"] .dot[data-pos="5"] { animation-delay: 240ms; }
  .dot-grid[style*="animation-delay: 240ms"] .dot[data-pos="6"] { animation-delay: 240ms; }

  .dot-grid[style*="animation-delay: 320ms"] .dot[data-pos="1"] { animation-delay: 320ms; }
  .dot-grid[style*="animation-delay: 320ms"] .dot[data-pos="2"] { animation-delay: 320ms; }
  .dot-grid[style*="animation-delay: 320ms"] .dot[data-pos="3"] { animation-delay: 320ms; }
  .dot-grid[style*="animation-delay: 320ms"] .dot[data-pos="4"] { animation-delay: 320ms; }
  .dot-grid[style*="animation-delay: 320ms"] .dot[data-pos="5"] { animation-delay: 320ms; }
  .dot-grid[style*="animation-delay: 320ms"] .dot[data-pos="6"] { animation-delay: 320ms; }

  .dot-grid[style*="animation-delay: 400ms"] .dot[data-pos="1"] { animation-delay: 400ms; }
  .dot-grid[style*="animation-delay: 400ms"] .dot[data-pos="2"] { animation-delay: 400ms; }
  .dot-grid[style*="animation-delay: 400ms"] .dot[data-pos="3"] { animation-delay: 400ms; }
  .dot-grid[style*="animation-delay: 400ms"] .dot[data-pos="4"] { animation-delay: 400ms; }
  .dot-grid[style*="animation-delay: 400ms"] .dot[data-pos="5"] { animation-delay: 400ms; }
  .dot-grid[style*="animation-delay: 400ms"] .dot[data-pos="6"] { animation-delay: 400ms; }

  .dot-grid[style*="animation-delay: 480ms"] .dot[data-pos="1"] { animation-delay: 480ms; }
  .dot-grid[style*="animation-delay: 480ms"] .dot[data-pos="2"] { animation-delay: 480ms; }
  .dot-grid[style*="animation-delay: 480ms"] .dot[data-pos="3"] { animation-delay: 480ms; }
  .dot-grid[style*="animation-delay: 480ms"] .dot[data-pos="4"] { animation-delay: 480ms; }
  .dot-grid[style*="animation-delay: 480ms"] .dot[data-pos="5"] { animation-delay: 480ms; }
  .dot-grid[style*="animation-delay: 480ms"] .dot[data-pos="6"] { animation-delay: 480ms; }

  .dot-grid[style*="animation-delay: 560ms"] .dot[data-pos="1"] { animation-delay: 560ms; }
  .dot-grid[style*="animation-delay: 560ms"] .dot[data-pos="2"] { animation-delay: 560ms; }
  .dot-grid[style*="animation-delay: 560ms"] .dot[data-pos="3"] { animation-delay: 560ms; }
  .dot-grid[style*="animation-delay: 560ms"] .dot[data-pos="4"] { animation-delay: 560ms; }
  .dot-grid[style*="animation-delay: 560ms"] .dot[data-pos="5"] { animation-delay: 560ms; }
  .dot-grid[style*="animation-delay: 560ms"] .dot[data-pos="6"] { animation-delay: 560ms; }

  /* Keyframes for each dot position */
  @keyframes dot-1-active {
    0%, 16.666% { opacity: 1; transform: scale(1); }
    16.667%, 100% { opacity: 0.25; transform: scale(0.85); }
  }

  @keyframes dot-2-active {
    0%, 16.666% { opacity: 0.25; transform: scale(0.85); }
    16.667%, 33.333% { opacity: 1; transform: scale(1); }
    33.334%, 100% { opacity: 0.25; transform: scale(0.85); }
  }

  @keyframes dot-3-active {
    0%, 83.332% { opacity: 0.25; transform: scale(0.85); }
    83.333%, 100% { opacity: 1; transform: scale(1); }
  }

  @keyframes dot-4-active {
    0%, 33.332% { opacity: 0.25; transform: scale(0.85); }
    33.333%, 50% { opacity: 1; transform: scale(1); }
    50.001%, 100% { opacity: 0.25; transform: scale(0.85); }
  }

  @keyframes dot-5-active {
    0%, 66.665% { opacity: 0.25; transform: scale(0.85); }
    66.666%, 83.333% { opacity: 1; transform: scale(1); }
    83.334%, 100% { opacity: 0.25; transform: scale(0.85); }
  }

  @keyframes dot-6-active {
    0%, 49.999% { opacity: 0.25; transform: scale(0.85); }
    50%, 66.666% { opacity: 1; transform: scale(1); }
    66.667%, 100% { opacity: 0.25; transform: scale(0.85); }
  }

  /* Respect reduced motion preference */
  @media (prefers-reduced-motion: reduce) {
    .preloader-overlay {
      transition: none;
    }
    
    .dot-grid {
      animation: none;
    }
    
    .dot,
    .dot[data-pos="1"],
    .dot[data-pos="2"],
    .dot[data-pos="3"],
    .dot[data-pos="4"],
    .dot[data-pos="5"],
    .dot[data-pos="6"] {
      animation: none;
      opacity: 0.5;
      transform: scale(1);
    }
  }

  /* Prevent scroll when preloader is visible */
  body.preloader-active {
    overflow: hidden;
  }
</style>

<script>
  (function() {
    const STORAGE_KEY = 'portfolio-preloader-shown';
    const FIRST_VISIT_TIMEOUT = 2800;
    const REPEAT_VISIT_TIMEOUT = 1200; // shorter guard but still waits for readiness
    
    const overlay = document.getElementById('preloader-overlay');
    if (!overlay) return;

    // Generate and apply noise texture to overlay::before
    const generateNoiseTexture = () => {
      const size = 256;
      const canvas = document.createElement('canvas');
      canvas.width = size;
      canvas.height = size;
      const ctx = canvas.getContext('2d');
      
      if (!ctx) return;
      
      const imageData = ctx.createImageData(size, size);
      const data = imageData.data;
      
      // Generate subtle noise for light background
      const baseValue = 220;
      const variation = 25;
      
      for (let i = 0; i < data.length; i += 4) {
        const v = baseValue - variation + Math.floor(Math.random() * (variation * 2));
        data[i] = data[i+1] = data[i+2] = v;
        data[i+3] = 255;
      }
      
      ctx.putImageData(imageData, 0, 0);
      const dataUrl = canvas.toDataURL('image/png');
      overlay.style.setProperty('--noise-texture', `url(${dataUrl})`);
      
      // Apply to ::before pseudo-element
      const style = document.createElement('style');
      style.textContent = `.preloader-overlay::before { background-image: var(--noise-texture); }`;
      document.head.appendChild(style);
    };

    generateNoiseTexture();

    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    
    // Check if this is a repeat visit
    const hasVisited = localStorage.getItem(STORAGE_KEY) === 'true';
    
    // Prevent body scroll while preloader is visible
    document.body.classList.add('preloader-active');
    
    // Track what's ready
    let assetsReady = false;
    let domReady = false;
    let imagesDecoded = false;

    let timeoutId: number | null = null;

    const hidePreloader = () => {
      if (timeoutId !== null) {
        clearTimeout(timeoutId);
        timeoutId = null;
      }

      console.log('[Preloader] Hiding preloader and revealing content');

      // Mark as visited for future loads
      localStorage.setItem(STORAGE_KEY, 'true');
      
      // Remove scroll lock
      document.body.classList.remove('preloader-active');
      
      // Reveal the rest of the DOM by removing the visibility gate
      document.body.classList.add('preloader-revealed');
      const appRoot = document.getElementById('app-root');
      if (appRoot) {
        (appRoot as HTMLElement).style.display = 'block';
      }
      
      // Fade out the preloader overlay next frame for a cross-fade effect
      requestAnimationFrame(() => {
        overlay.classList.add('is-hidden');
      });
      
      // Remove from DOM after transition
      setTimeout(() => {
        overlay.remove();
      }, 600);
    };

    const checkReadyToReveal = () => {
      console.log('[Preloader] Checking readiness:', { assetsReady, domReady, imagesDecoded });
      
      // Only reveal when ALL conditions are met
      if (assetsReady && domReady && imagesDecoded) {
        console.log('[Preloader] All conditions met, revealing content');
        hidePreloader();
      }
    };

    // Assets to preload - focus on actual above-the-fold content
    const criticalAssets = [
      // Hero/profile image (always visible)
      { url: '/images/profile-01.png', type: 'image' },
      // First project's app icon (My Pharmacy)
      { url: '/images/prj-app-icon-mypharm.png', type: 'image' },
      // First flow poster that appears on hover (My Pharmacy - Home flow)
      { url: '/flows/videos/my-pharmacy/01-mp-home.jpg', type: 'image' },
      // Second flow poster (immediate hover target)
      { url: '/flows/videos/my-pharmacy/02-mp-scripts.jpg', type: 'image' }
    ];

    // Add font loading using Font Loading API
    const fontPromises: Promise<void>[] = [];
    if (document.fonts && document.fonts.load) {
      fontPromises.push(
        document.fonts.load('400 24px "PP Mondwest"')
          .then(() => console.log('[Preloader] PP Mondwest font loaded'))
          .catch((err) => {
            console.warn('[Preloader] Font loading failed:', err);
          })
      );
    }

    const preloadAsset = (asset: { url: string; type: string }) => {
      return new Promise<void>((resolve) => {
        if (asset.type === 'image') {
          const img = new Image();
          img.onload = () => {
            console.log(`[Preloader] Image loaded: ${asset.url}`);
            resolve();
          };
          img.onerror = () => {
            console.warn(`[Preloader] Image failed to load: ${asset.url}`);
            resolve(); // Still resolve to not block
          };
          img.src = asset.url;
        }
      });
    };

    // Handle reduced motion - show briefly then hide
    if (prefersReducedMotion) {
      console.log('[Preloader] Reduced motion detected, showing briefly');
      // Still wait for DOM to avoid flash
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
          setTimeout(hidePreloader, 200);
        }, { once: true });
      } else {
        setTimeout(hidePreloader, 200);
      }
      return;
    }

    // For repeat visits we still run the full readiness flow, just with a shorter timeout

    // Begin preloading flow
    console.log('[Preloader] Preloading assets');
    
    // Set maximum timeout
    const MAX_TIMEOUT = hasVisited ? REPEAT_VISIT_TIMEOUT : FIRST_VISIT_TIMEOUT;
    timeoutId = window.setTimeout(() => {
      console.log('[Preloader] Timeout reached, forcing reveal');
      assetsReady = true;
      domReady = true;
      imagesDecoded = true;
      hidePreloader();
    }, MAX_TIMEOUT);

    // 1. Wait for DOM to be ready
    const waitForDOM = new Promise<void>((resolve) => {
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
          console.log('[Preloader] DOM ready');
          domReady = true;
          resolve();
        }, { once: true });
      } else {
        console.log('[Preloader] DOM already ready');
        domReady = true;
        resolve();
      }
    });

    // 2. Preload critical assets (images + fonts)
    const waitForAssets = Promise.all([
      ...criticalAssets.map(preloadAsset),
      ...fontPromises
    ]).then(() => {
      console.log('[Preloader] All assets loaded');
      assetsReady = true;
    }).catch((err) => {
      console.error('[Preloader] Error preloading assets:', err);
      assetsReady = true; // Continue anyway
    });

    // 3. Wait for critical images to decode and be ready to paint
    const waitForImageDecode = waitForDOM.then(() => {
      // Find all critical images in DOM
      const heroImg = document.querySelector('img[src="/images/profile-01.png"]') as HTMLImageElement;
      const imagesToDecode = heroImg ? [heroImg] : [];
      
      if (imagesToDecode.length > 0 && imagesToDecode[0].decode) {
        return Promise.all(imagesToDecode.map(img => 
          img.decode()
            .catch(() => console.warn('[Preloader] Image decode failed:', img.src))
        ))
          .then(() => {
            console.log('[Preloader] Critical images decoded and ready to paint');
            imagesDecoded = true;
          });
      } else {
        console.log('[Preloader] No critical images found or decode not supported');
        imagesDecoded = true;
        return Promise.resolve();
      }
    });

    // Wait for ALL conditions and fonts, then reveal
    Promise.all([waitForDOM, waitForAssets, waitForImageDecode, (document.fonts && document.fonts.ready) ? document.fonts.ready.catch(() => {}) : Promise.resolve()])
      .then(() => {
        checkReadyToReveal();
      });
  })();
</script>
