---
// Navigation.astro - Responsive navigation bar for the portfolio site
// Import NavItem component and SVG files
import NavItem from './NavItem.astro';
import SocialLink from './SocialLink.astro';

// Import SVG files with currentColor support
import HomeIcon from '../icons/home-current.svg?raw';
import WorkIcon from '../icons/work-current.svg?raw';
import ExplorationsIcon from '../icons/explorations-current.svg?raw';
import InstagramIcon from '../icons/instagram.svg?raw';
import TwitterIcon from '../icons/twitter.svg?raw';
import LinkedInIcon from '../icons/linkedin.svg?raw';
import GitHubIcon from '../icons/github.svg?raw';
import ResumeIcon from '../icons/resume.svg?raw';

// Props for the component
export interface Props {
  currentPath: string; // Current path to determine active page
}

const { currentPath = '/' } = Astro.props;

// Define navigation items
const navItems = [
  { name: 'Home', path: '/', icon: HomeIcon },
  { name: 'Work', path: '/#work', icon: WorkIcon },
  { name: 'Explorations', path: '/explorations', icon: ExplorationsIcon }
];

// Define social media links
const socialLinks = [
  { name: 'Instagram', icon: InstagramIcon, url: 'https://www.instagram.com/theunistm/' },
  { name: 'Twitter', icon: TwitterIcon, url: 'https://twitter.com/theunistm' },
  { name: 'LinkedIn', icon: LinkedInIcon, url: 'https://www.linkedin.com/in/theunistm/' },
  { name: 'GitHub', icon: GitHubIcon, url: 'https://github.com/theunistm' }
];

// Get current date for tooltip in DD/MM/YYYY format
const today = new Date();
const formattedDate = `${today.getDate().toString().padStart(2, '0')}/${(today.getMonth() + 1).toString().padStart(2, '0')}/${today.getFullYear()}`;

// Pre-calculate active/inactive color classes
const activeColor = 'fill-[#FBF9F5]';
const inactiveColor = 'fill-[#500F0B] opacity-50';
const hoverColor = 'hover:opacity-80';

// Function to check if a nav item is active
const isActive = (itemPath: string) => {
  // Special case for Home and Work since they're on the same page
  if (currentPath === '/' && itemPath === '/') return true;
  if (currentPath === '/#work' && itemPath === '/#work') return true;
  if (currentPath === '/explorations' && itemPath === '/explorations') return true;
  return false;
};
---

<nav class="fixed bottom-8 left-8 z-50">
  <!-- Single navbar with two groups -->
  <div class="flex items-center gap-8 rounded-full border border-[#EAE2DE] bg-[#FBF9F5]/50 backdrop-blur-md px-6 py-3">
    <!-- Group 1: Page Navigation -->
    <div class="flex items-center gap-4">
      <NavItem href="/" label="Home" currentPath={currentPath} iconSvg={HomeIcon} />
      <NavItem href="/#work" label="Work" currentPath={currentPath} iconSvg={WorkIcon} />
      <NavItem href="/explorations" label="Explorations" currentPath={currentPath} iconSvg={ExplorationsIcon} />
    </div>

    <!-- Divider between groups -->
    <div class="h-6 w-px bg-[#500F0B]/20"></div>

    <!-- Group 2: Meta Info and Social Links -->
    <div class="flex items-center gap-6">
      <!-- Social Media Icons -->
      <div class="flex items-center gap-3">
        <SocialLink href="https://www.instagram.com/theunistm/" label="Instagram" iconSvg={InstagramIcon} />
        <SocialLink href="https://twitter.com/theunistm" label="Twitter" iconSvg={TwitterIcon} />
        <SocialLink href="https://www.linkedin.com/in/theunistm/" label="LinkedIn" iconSvg={LinkedInIcon} />
        <SocialLink href="https://github.com/theunistm" label="GitHub" iconSvg={GitHubIcon} />
      </div>

      <!-- Resume Link -->
      <a 
        href="/resume.pdf" 
        target="_blank" 
        rel="noopener noreferrer"
        class="flex items-center gap-2 px-3 py-2 rounded-full border border-[#500F0B]/50 transition-all text-[#500F0B] hover:bg-[#500F0B]/10 focus-visible:ring-2 focus-visible:ring-[#500F0B] focus-visible:outline-none"
        aria-label="Resume"
      >
        <span class="icon w-4 h-4" aria-hidden="true" set:html={ResumeIcon.replace(/fill="[^"]*"/g, 'fill="currentColor"')} />
        <span class="text-xs font-medium">Resume</span>
      </a>

      <!-- Meta Info -->
      <div class="flex items-center gap-2 text-xs text-[#500F0B]">
        <span>¬©2025, Theunis Hall</span>
        <span class="opacity-50">‚Ä¢</span>
        <span class="group relative cursor-help">
          site v5.3
          <span class="absolute bottom-full left-1/2 -translate-x-1/2 mb-2 px-3 py-1.5 bg-[#500F0B] text-[#FBF9F5] rounded-md text-xs whitespace-nowrap opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none">
            Last updated: {formattedDate} üë®‚Äçüíª
          </span>
        </span>
      </div>
    </div>
  </div>
</nav>

<script>
  // Script for handling active state on scroll between Home and Work sections
  document.addEventListener('DOMContentLoaded', () => {
    const workSection = document.getElementById('work');
    const homeLink = document.querySelector('a[href="/"]');
    const workLink = document.querySelector('a[href="/#work"]');
    
    // With our new component structure, we select the icon span that contains the SVG
    const homeIcon = homeLink?.querySelector('.icon');
    const workIcon = workLink?.querySelector('.icon');
    
    if (workSection && homeLink && workLink && homeIcon && workIcon) {
      // Function to toggle active/inactive state
      const setNavItemActive = (link, icon, isActive) => {
        if (isActive) {
          // Active state
          link.setAttribute('aria-current', 'page');
          link.classList.add('bg-[#500F0B]');
          link.classList.add('text-[#FBF9F5]');
          link.classList.add('border');
          link.classList.add('border-[#FBF9F5]');
          link.classList.remove('opacity-50');
        } else {
          // Inactive state
          link.removeAttribute('aria-current');
          link.classList.remove('bg-[#500F0B]');
          link.classList.remove('text-[#FBF9F5]');
          link.classList.remove('border');
          link.classList.remove('border-[#FBF9F5]');
          link.classList.add('text-[#500F0B]');
          link.classList.add('opacity-50');
        }
      };
      
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            // Work section is in view
            setNavItemActive(homeLink, homeIcon, false);
            setNavItemActive(workLink, workIcon, true);
          } else {
            // Home section is in view
            setNavItemActive(homeLink, homeIcon, true);
            setNavItemActive(workLink, workIcon, false);
          }
        });
      }, { threshold: 0.2 }); // Trigger when 20% of the element is visible
      
      observer.observe(workSection);

      // Set initial states based on current view
      const initialCheck = new IntersectionObserver((entries) => {
        const isWorkVisible = entries[0].isIntersecting;
        setNavItemActive(homeLink, homeIcon, !isWorkVisible);
        setNavItemActive(workLink, workIcon, isWorkVisible);
        initialCheck.disconnect(); // Only need to check once on page load
      });
      initialCheck.observe(workSection);
    }
  });
</script>
