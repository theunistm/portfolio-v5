---
// Icon.astro - Reusable SVG icon component
// Usage: <Icon name="wave" size="24" />

export interface Props {
  name: string;
  size?: string | number;
  class?: string;
}

const { name, size = 24, class: className = '' } = Astro.props;

// Use import.meta.glob to statically import all SVG files at build time
const icons = import.meta.glob('../icons/*.svg', { 
  query: '?raw',
  import: 'default',
  eager: true 
}) as Record<string, string>;

// Build a lookup map: filename (without extension) -> SVG content
const iconMap: Record<string, string> = {};
for (const [path, content] of Object.entries(icons)) {
  const filename = path.split('/').pop()?.replace('.svg', '') || '';
  iconMap[filename] = content;
}

// Look up the requested icon
const svgContent = iconMap[name];
const iconFound = !!svgContent;

if (!iconFound) {
  console.error(`Icon '${name}' not found`);
}

// Style attributes for the wrapper
const wrapperStyle = `width: ${size}px; height: ${size}px;`;
---

{iconFound ? (
  <span 
    class={`inline-block align-middle ${className}`}
    style={wrapperStyle}
    set:html={svgContent}
  />
) : (
  <span class="text-red-500">Icon '{name}' not found</span>
)}
